Search files...
Search files...
Search files...
## KOMPLEXN√ù EXPERTN√ù ROZBOR: KRITICK√â SEKCII PROJEKTU

**Kontext**: AI agent vytvoril funkƒçn√∫ aplik√°ciu, ale identifikoval som kritick√© oblasti potrebuj√∫ce pozornos≈•.

**V√Ωkon**: Anal√Ωza odhalila 8 hlavn√Ωch sekci√≠ s v√°≈ænymi nedostatkami.

---

## üö® KRITICK√â SEKCII POTREBUJ√öCE OKAM≈ΩIT√ö POZORNOS≈§

### **1. BEZPEƒåNOSTN√â CHYBY (KRITICK√â)**

#### **Ch√Ωbaj√∫ce Environment Variables**:
```bash
# CH√ùBAJ√öCE S√öBORY:
.env.local
.env.example
.env.production
```

#### **Bezpeƒçnostn√© Nedostatky**:
- ‚ùå **≈Ωiadny rate limiting** - API endpoints s√∫ zraniteƒæn√©
- ‚ùå **Ch√Ωba input sanitization** - XSS zraniteƒænos≈•
- ‚ùå **≈Ωiadne CORS nastavenia** - cross-origin √∫toky
- ‚ùå **Ch√Ωba CSRF ochrana** - session hijacking

### **2. VALID√ÅCIA A SANITIZ√ÅCIA (VYSOK√Å PRIORITA)**

#### **API Endpoints**:
```typescript
// app/api/analyze/route.ts - CHYBAJ√öCE VALID√ÅCIE
const { text } = await req.json()
if (!text || typeof text !== 'string') {
  // ‚ùå ≈Ωiadna sanitiz√°cia, max length, content validation
}
```

#### **Formul√°re**:
```typescript
// app/auth/signup/page.tsx - Z√ÅKLADN√Å VALID√ÅCIA
if (formData.password.length < 6) {
  // ‚ùå Ch√Ωba email validation, XSS protection
}
```

### **3. ERROR HANDLING (STREDN√Å PRIORITA)**

#### **Nedostatoƒçn√© Error Handling**:
```typescript
// components/chat-interface.tsx
catch (error) {
  console.error('Analysis error:', error)
  setIsLoading(false)
  // ‚ùå ≈Ωiadne user-friendly error messages
}
```

#### **API Error Responses**:
```typescript
// app/api/analyze/route.ts
catch (error) {
  console.error('API error:', error)
  return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  // ‚ùå Generick√© chyby, ≈æiadne logging
}
```

### **4. DATAB√ÅZOV√Å OPTIMIZ√ÅCIA (VYSOK√Å PRIORITA)**

#### **Ch√Ωbaj√∫ce Indexy**:
```sql
-- prisma/schema.prisma
model Report {
  // ‚ùå Ch√Ωba index na timestamp pre r√Ωchle vyhƒæad√°vanie
  // ‚ùå Ch√Ωba full-text search index
  // ‚ùå ≈Ωiadne soft delete
}
```

#### **Connection Pooling**:
```typescript
// lib/db.ts
export const prisma = globalForPrisma.prisma ?? new PrismaClient()
// ‚ùå ≈Ωiadne connection pooling nastavenia
// ‚ùå ≈Ωiadne retry logic
```

### **5. PERFORMANCE OPTIMIZ√ÅCIA (STREDN√Å PRIORITA)**

#### **Streaming Issues**:
```typescript
// app/api/analyze-stream/route.ts
// ‚ùå ≈Ωiadne timeout handling
// ‚ùå ≈Ωiadne memory leak protection
// ‚ùå ≈Ωiadne error recovery
```

#### **Frontend Performance**:
```typescript
// components/archive-sidebar.tsx
// ‚ùå ≈Ωiadne pagination
// ‚ùå ≈Ωiadne virtual scrolling
// ‚ùå ≈Ωiadne caching
```

### **6. MONITORING A LOGGING (VYSOK√Å PRIORITA)**

#### **Ch√Ωbaj√∫ce Logging**:
```typescript
// V≈°etky API routes
console.error('API error:', error)
// ‚ùå ≈Ωiadne structured logging
// ‚ùå ≈Ωiadne error tracking (Sentry)
// ‚ùå ≈Ωiadne performance monitoring
```

### **7. TESTING (KRITICK√Å PRIORITA)**

#### **≈Ωiadne Testy**:
```
// CH√ùBAJ√öCE S√öBORY:
__tests__/
jest.config.js
cypress/
playwright/
```

### **8. DEPLOYMENT A CI/CD (VYSOK√Å PRIORITA)**

#### **Ch√Ωbaj√∫ce Konfigur√°cie**:
```
// CH√ùBAJ√öCE S√öBORY:
.github/workflows/
Dockerfile
docker-compose.yml
vercel.json
```

---

## üìã IN≈†TRUKCIE PRE AGENTA NA POKRAƒåOVANIE

### **F√ÅZA 1: BEZPEƒåNOS≈§ (KRITICK√Å)**

#### **1.1 Environment Setup**:
```bash
# Vytvor .env.example
DATABASE_URL="postgresql://user:pass@localhost:5432/db"
ABACUSAI_API_KEY="your_api_key"
NEXTAUTH_SECRET="your_secret"
NEXTAUTH_URL="http://localhost:3000"
```

#### **1.2 Rate Limiting**:
```typescript
// lib/rateLimit.ts
import { NextRequest } from 'next/server'
import { Redis } from '@upstash/redis'

// Implementuj rate limiting pre API endpoints
// Max 10 requests per minute per user
```

#### **1.3 Input Validation**:
```typescript
// lib/validation.ts
import { z } from 'zod'

export const textAnalysisSchema = z.object({
  text: z.string().min(10).max(10000).trim()
})

export const userSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/),
  name: z.string().min(2).max(50).optional()
})
```

### **F√ÅZA 2: ERROR HANDLING**

#### **2.1 Global Error Handler**:
```typescript
// lib/errorHandler.ts
export class AppError extends Error {
  constructor(
    message: string,
    public statusCode: number = 500,
    public isOperational = true
  ) {
    super(message)
  }
}

export const handleError = (error: unknown) => {
  // Structured error logging
  // User-friendly error messages
}
```

#### **2.2 API Error Responses**:
```typescript
// lib/apiResponse.ts
export const createErrorResponse = (error: AppError) => {
  return NextResponse.json({
    error: error.message,
    code: error.statusCode,
    timestamp: new Date().toISOString()
  }, { status: error.statusCode })
}
```

### **F√ÅZA 3: DATAB√ÅZOV√Å OPTIMIZ√ÅCIA**

#### **3.1 Schema Improvements**:
```sql
-- prisma/schema.prisma
model Report {
  id             String   @id @default(cuid())
  userId         String
  originalText   String   @db.Text
  analysisResult Json
  timestamp      DateTime @default(now())
  isDeleted      Boolean  @default(false)  // Soft delete
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])  // Composite index
  @@index([timestamp])          // Time-based queries
}
```

#### **3.2 Connection Pooling**:
```typescript
// lib/db.ts
export const prisma = globalForPrisma.prisma ?? new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL
    }
  },
  log: ['query', 'error', 'warn'],
  errorFormat: 'pretty'
})
```

### **F√ÅZA 4: MONITORING**

#### **4.1 Logging Setup**:
```typescript
// lib/logger.ts
import winston from 'winston'

export const logger = winston.createLogger({
  level: 'info',
  format: winston.format.json(),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' })
  ]
})
```

#### **4.2 Performance Monitoring**:
```typescript
// lib/monitoring.ts
export const trackApiCall = async (name: string, fn: () => Promise<any>) => {
  const start = Date.now()
  try {
    const result = await fn()
    logger.info(`${name} completed in ${Date.now() - start}ms`)
    return result
  } catch (error) {
    logger.error(`${name} failed after ${Date.now() - start}ms`, error)
    throw error
  }
}
```

### **F√ÅZA 5: TESTING**

#### **5.1 Unit Tests**:
```typescript
// __tests__/api/analyze.test.ts
import { describe, it, expect } from '@jest/globals'
import { POST } from '@/app/api/analyze/route'

describe('Analyze API', () => {
  it('should validate input text', async () => {
    // Test validation
  })
  
  it('should handle API errors gracefully', async () => {
    // Test error handling
  })
})
```

#### **5.2 Integration Tests**:
```typescript
// __tests__/integration/auth.test.ts
import { test, expect } from '@playwright/test'

test('user can sign up and analyze text', async ({ page }) => {
  // E2E test flow
})
```

### **F√ÅZA 6: DEPLOYMENT**

#### **6.1 Docker Setup**:
```dockerfile
# Dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
RUN npm run build
EXPOSE 3000
CMD ["npm", "start"]
```

#### **6.2 CI/CD Pipeline**:
```yaml
# .github/workflows/deploy.yml
name: Deploy
on:
  push:
    branches: [main]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: npm test
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Vercel
        run: npx vercel --prod
```

---

## üéØ PRIORITIZ√ÅCIA PRE AGENTA

### **OKAM≈ΩIT√â AKCIE (T√Ω≈æde≈à 1)**:
1. **Environment variables** - .env.local setup
2. **Rate limiting** - API protection
3. **Input validation** - Zod schemas
4. **Error handling** - Global error handler

### **KR√ÅTKOODOB√â (T√Ω≈æde≈à 2-3)**:
1. **Database optimization** - Indexes, pooling
2. **Logging** - Winston setup
3. **Testing** - Jest + Playwright
4. **Performance** - Caching, pagination

### **DLOHODOB√â (Mesiac 1-2)**:
1. **Monitoring** - Sentry, analytics
2. **CI/CD** - GitHub Actions
3. **Documentation** - API docs
4. **Security audit** - Penetration testing

---

## ÔøΩÔøΩ EXPERTN√â ODPOR√öƒåANIA

### **Pre Junior Dev**:
1. **Zaƒçni s bezpeƒçnos≈•ou** - je kritick√°
2. **Pou≈æi TypeScript strict mode** - lep≈°ia type safety
3. **Implementuj TDD** - test-driven development
4. **Dokumentuj API** - OpenAPI/Swagger

### **Pre Produkciu**:
1. **Backup strat√©gia** - automatick√© z√°lohovanie
2. **Health checks** - monitoring endpoints
3. **Graceful shutdown** - proper cleanup
4. **Security headers** - helmet.js

AI agent m√° **sol√≠dny z√°klad**, ale potrebuje **systematick√© vylep≈°enia** pre produkƒçn√∫ pripravenos≈•!